// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/database/user/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/garoque/backend-code-challenge-snapfi/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockDabataseUserInterface is a mock of DabataseUserInterface interface.
type MockDabataseUserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDabataseUserInterfaceMockRecorder
}

// MockDabataseUserInterfaceMockRecorder is the mock recorder for MockDabataseUserInterface.
type MockDabataseUserInterfaceMockRecorder struct {
	mock *MockDabataseUserInterface
}

// NewMockDabataseUserInterface creates a new mock instance.
func NewMockDabataseUserInterface(ctrl *gomock.Controller) *MockDabataseUserInterface {
	mock := &MockDabataseUserInterface{ctrl: ctrl}
	mock.recorder = &MockDabataseUserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDabataseUserInterface) EXPECT() *MockDabataseUserInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDabataseUserInterface) Create(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDabataseUserInterfaceMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDabataseUserInterface)(nil).Create), ctx, user)
}

// ReadAll mocks base method.
func (m *MockDabataseUserInterface) ReadAll(ctx context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", ctx)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDabataseUserInterfaceMockRecorder) ReadAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDabataseUserInterface)(nil).ReadAll), ctx)
}

// ReadOneById mocks base method.
func (m *MockDabataseUserInterface) ReadOneById(ctx context.Context, userId string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOneById", ctx, userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOneById indicates an expected call of ReadOneById.
func (mr *MockDabataseUserInterfaceMockRecorder) ReadOneById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOneById", reflect.TypeOf((*MockDabataseUserInterface)(nil).ReadOneById), ctx, userId)
}
