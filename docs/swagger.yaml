basePath: /v1
definitions:
  dto.CreateTransaction:
    properties:
      amount:
        type: number
      destinationUserId:
        type: string
      sourceUserId:
        type: string
    required:
    - amount
    - destinationUserId
    - sourceUserId
    type: object
  dto.CreateUser:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.IncreaseBalanceUser:
    properties:
      userId:
        type: string
      value:
        type: number
    required:
    - userId
    - value
    type: object
  entity.Transaction:
    properties:
      amount:
        type: number
      createdAt:
        type: string
      id:
        type: string
      receiverId:
        type: string
      senderId:
        type: string
      state:
        type: string
    type: object
  entity.User:
    properties:
      balance:
        type: number
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:1323
info:
  contact:
    email: gfroque1@gmail.com
    name: Gabriel F Roque
    url: https://github.com/garoque/backend-code-challenge-snapfi
  license:
    name: Snapfi Backend Code Challenge
    url: https://github.com/garoque/backend-code-challenge-snapfi
  termsOfService: http://swagger.io/terms/
  title: Snapfi Backend Code Challenge
  version: "1.0"
paths:
  /transaction:
    get:
      consumes:
      - application/json
      description: Read all transactions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Transaction'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      summary: Read all transactions
      tags:
      - transaction
    post:
      consumes:
      - application/json
      description: Create transaction
      parameters:
      - description: transaction request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTransaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Transaction'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create transaction
      tags:
      - transaction
  /transaction/increase-balance:
    put:
      consumes:
      - application/json
      description: Increase balance user
      parameters:
      - description: increase balance request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.IncreaseBalanceUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Increase balance user
      tags:
      - transaction
  /user:
    get:
      consumes:
      - application/json
      description: Read read all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      summary: Read read all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create user
      tags:
      - user
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Read one user
      parameters:
      - description: user ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Read one user
      tags:
      - user
swagger: "2.0"
